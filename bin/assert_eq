#!/usr/bin/env bash
# shellcheck disable=SC2034 # don't warn for unused variables

set -o errexit
# set -o nounset
set -o pipefail
# set -o xtrace

# ------------------------------------------------------------------------
# https://github.com/torokmark/assert.sh - provide assertions for shell scripts
# Public domain - MIT License
# https://github.com/torokmark/assert.sh/blob/main/LICENSE
# ------------------------------------------------------------------------

usage () {
  cat << EOF
Usage: $(basename "$0") <actual> <expected> [ message ]
  Assert that two values are equal to one another

Args:
  actual: string:     actual value
  expected: string:   expected value
  message: string:    failure message [optional]

Example: '$(basename "$0") -v "Hello" "Hello"
Example: '$(basename "$0") "1" 1 "This message should not be seen"
EOF
  exit
}

verbose=1
while getopts "hv" opt; do
  case ${opt} in
    h ) usage ;;
    v ) verbose=0;;
    \? )
      printf "Invalid option: %s" "$OPTARG" 1>&2
      usage
      ;;
  esac
done
shift $((OPTIND -1)) # for any additional params

[[ $# -lt 2 || $# -gt 3 ]] && {
  warn "Error: $(basename "$0") requires two or three arguments; $# given"
  exit 1
}

actual="$1"
expected="$2"
msg="${3:-}"
status='fail'

if [[ "$actual" == "$expected" ]]; then
  status='pass'
fi

if [[ "$status" == 'pass' ]]; then
  status_msg="PASS :: $(basename "$0") ('$actual', '$expected')"
  [[ "$verbose" -eq 0 ]] && win "$status_msg"
  exit 0
else
  status_msg="FAIL :: $(basename "$0") ('$actual', '$expected')"
  if [[ -n "$msg" ]]; then
    yell "$status_msg :: $msg"
  elif [[ "$verbose" -eq 0 ]]; then
    yell "$status_msg"
  fi
  exit 1
fi
