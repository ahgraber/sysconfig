#!/bin/zsh

# Personal Zsh configuration file. It is strongly recommended to keep all
# shell customization and configuration (including exported environment
# variables such as PATH) in this file or in files source by it.
#
# Documentation: https://github.com/romkatv/zsh4humans/blob/v5/README.md.

# Periodic auto-update on Zsh startup: 'ask' or 'no'.
# You can manually run `z4h update` to update everything.
zstyle ':z4h:' auto-update      'no'
# Ask whether to auto-update this often; has no effect if auto-update is 'no'.
zstyle ':z4h:' auto-update-days '28'

# Move prompt to the bottom when zsh starts and on Ctrl+L.
zstyle ':z4h:' prompt-at-bottom 'yes'

# Keyboard type: 'mac' or 'pc'.
zstyle ':z4h:bindkey' keyboard  'mac'

# Enable iTerm2 integration
zstyle ':z4h:' iterm2-integration 'no'

# Right-arrow key accepts one character ('partial-accept') from
# command autosuggestions or the whole thing ('accept')?
zstyle ':z4h:autosuggestions' forward-char 'accept'

# Recursively traverse directories when TAB-completing files.
zstyle ':z4h:fzf-complete' recurse-dirs 'no'

# Enable direnv to automatically source .envrc files.
zstyle ':z4h:direnv'         enable 'yes'
# Show "loading" and "unloading" notifications from direnv.
zstyle ':z4h:direnv:success' notify 'yes'

# Enable ('yes') or disable ('no') automatic teleportation of z4h over
# ssh when connecting to these hosts.
zstyle ':z4h:ssh:example-hostname1'   enable 'yes'
zstyle ':z4h:ssh:*.example-hostname2' enable 'no'
# The default value if none of the overrides above match the hostname.
zstyle ':z4h:ssh:*'                   enable 'no'

# Send these files over to the remote host when connecting over ssh to the
# enabled hosts.
zstyle ':z4h:ssh:*' send-extra-files '~/.nanorc' '~/.env.zsh'

# Clone additional Git repositories from GitHub.
#
# This doesn't do anything apart from cloning the repository and keeping it up-to-date.
# `z4h install` must come before `z4h init`; Cloned files can be used after `z4h init`.
z4h install ohmyzsh/ohmyzsh || return
z4h install esc/conda-zsh-completion || return

# Install or update core components (fzf, zsh-autosuggestions, etc.) and
# initialize Zsh. After this point console I/O is unavailable until Zsh
# is fully initialized. Everything that requires user interaction or can
# perform network I/O must be done above. Everything else is best done below.
z4h init || return

# ---[ Update path ]-----------------------------------------------------------
typeset -U path
export path=(/{bin,sbin} $path)
export path=(/usr/{bin,sbin} $path)
export path=(/usr/local/{bin,sbin} $path)
export path=(~/bin $path)

### Autodetect architecture (and set `brew` path)
if [[ "$(sysctl -a | grep machdep.cpu.brand_string)" == *Apple* ]]; then
  archcheck=$(/usr/bin/arch)
  typeset -g archcheck
  case $archcheck in
    arm64)
      archcheck+=' (Native)'
      if [[ -f /opt/homebrew/bin/brew ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
        alias brew='/opt/homebrew/bin/brew'
      fi
    ;;
    i386|x86_64)
      archcheck+=' (Rosetta)'
      if [[ -f /usr/local/homebrew/bin/brew ]]; then
        eval "$(/usr/local/homebrew/bin/brew shellenv)"
        alias brew='/usr/local/homebrew/bin/brew'
      fi
    ;;
    *)
      archcheck+=' (Unknown)'
    ;;
  esac

  # add arch to p10k
  function prompt_my_arch() {
    p10k segment -f 250 -i 'ðŸ’»' -t "${archcheck//\%/%%}"
  }

  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=my_arch  # to specify location, modify ~/.p10k.zsh
fi

# # Prepend Homebrew's executable directory (z4h automatically does this)
# if [[ $(command -v brew) ]]; then
#   export path=($(brew --prefix)/bin $(brew --prefix)/sbin $(brew --prefix)/share $path)
# fi

# # Add system pythons to path?
# pythons=($HOME/Library/Python/3.7/bin $HOME/Library/Python/3.8/bin $HOME/Library/Python/3.9/bin)
# export path=($pythons $path)

# ---[ Export environmental variables ]----------------------------------------
export GPG_TTY=$TTY
export LANG=en_US.UTF-8
export ZSH_CONFIG="${HOME}/.zshconfig"

# # unixdodbc
# export LDFLAGS="-L/opt/homebrew/Cellar/unixodbc/2.3.9_1/lib ${LDFLAGS}"
# export CPPFLAGS="-I/opt/homebrew/Cellar/unixodbc/2.3.9_1/include ${CPPFLAGS}"
# # openblas
# export LDFLAGS="-L/opt/homebrew/opt/openblas/lib ${LDFLAGS}"
# export CPPFLAGS="-I/opt/homebrew/opt/openblas/include ${CPPFLAGS}"
# export OPENBLAS="$(brew --prefix openblas)"

# ---[ Load/Source additional plugins/files ]---------------------------------
# `z4h source`: ohmyzsh/ohmyzsh/lib/diagnostics.zsh  # source an individual file
# `z4h load`:   ohmyzsh/ohmyzsh/plugins/emoji-clock  # load a plugin

# Source additional local files if they exist.
z4h source "${HOME}/.env.zsh"
z4h source "${HOME}/.aliases"
z4h source "${HOME}/.aliases.local"
if [[ -d "${HOME}/.fonts" ]]; then
  for sh in "${HOME}"/.fonts/*.sh; do
    z4h source "$sh"
  done
fi
if [[ "$(command -v brew)" ]]; then
    [[ ! "$(command -v bat)" ]] && brew install bat
    [[ ! "$(command -v bfs)" ]] && brew install tavianator/tap/bfs
    [[ ! "$(command -v exa)" ]] && brew install exa
    [[ ! "$(command -v fd)" ]] && brew install fd
    [[ ! "$(command -v fzf)" ]] && brew install fzf
    [[ ! "$(command -v jq)" ]] && brew install jq
    [[ ! "$(command -v vivid)" ]] && brew install vivid
fi

[[ "$(command -v vivid)" ]] && export LS_COLORS="$(vivid generate one-dark)"
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

z4h load -c esc/conda-zsh-completion
z4h load -c ohmyzsh/ohmyzsh/plugins/gitfast            # git completions
z4h load -c ohmyzsh/ohmyzsh/plugins/safe-paste         # prevent pasted code from running
z4h load -c ohmyzsh/ohmyzsh/plugins/terraform          # terraform completions

# z4h source -c ohmyzsh/ohmyzsh/lib/clipboard.zsh
z4h source -c "$HOME/.zshconfig/functions/clipboard.zsh"
z4h source -c "$HOME/.zshconfig/lib/corrections.zsh"

### ---[ Define key bindings ]-------------------------------------------------
z4h bindkey undo Ctrl+/  # undo the last command line change
z4h bindkey redo Alt+/   # redo the last undone command line change

z4h bindkey z4h-cd-back    Shift+Left   # cd into the previous directory
z4h bindkey z4h-cd-forward Shift+Right  # cd into the next directory
z4h bindkey z4h-cd-up      Shift+Up     # cd into the parent directory
z4h bindkey z4h-cd-down    Shift+Down   # cd into a child directory

### fzf-bindings updates keybinds for fzf widgets/commands {binding:command}
# hitting `tab` will accept and stay in fzf completion menu
zstyle ':z4h:fzf-dir-history' fzf-bindings tab:repeat
zstyle ':z4h:fzf-complete' fzf-bindings tab:repeat
zstyle ':z4h:fzf-dir-history' fzf-bindings tab:repeat

# use clipboard functions
# paste command
bindkey '^Y'   pb-yank                  # ctrl + y
# cut commands
bindkey '^K'   pb-kill-line             # ctrl + k
bindkey '^U'   pb-kill-whole-line       # ctrl + u
bindkey '^W'   pb-backward-kill-word    # ctrl + w; opt + del
bindkey '^[^H' pb-backward-kill-word    # esc + ctrl + h
bindkey '^[^?' pb-backward-kill-word    # esc + backspace

bindkey '^[D'      pb-kill-word         # esc + d; opt + right
bindkey '^[[3;5~'  pb-kill-word         # ctrl + delete
bindkey '^X^K' pb-kill-buffer           # ctrl + x, ctrl + k
bindkey '^[w'  pb-copy-region-as-kill-deactivate-mark   # esc + w
bindkey '^[W'  pb-copy-region-as-kill-deactivate-mark   # esc + w


# ### Autoload functions.
# autoload -Uz zmv

# ### Define functions and completions.
# function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
# compdef _directories md

# ### Define named directories: ~w <=> Windows home directory on WSL.
# [[ -z $z4h_win_home ]] || hash -d w=$z4h_win_home

### Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
### These are examples
setopt no_clobber               # Force using `>!` to truncate / overwrite an existing file
setopt no_mail_warning          # Don't print warning if mail
setopt glob_dots                # no special treatment for file names with a leading dot
setopt no_auto_menu             # require an extra TAB press to open the completion menu
setopt always_to_end            # when completing from the middle of a word, move the cursor to the end of the word
setopt mark_dirs                # append trailing slash '/' to directory names resulting from globbing
setopt auto_param_slash         # if completed parameter is dir, add trailing slash

# ---[ User configuration ]----------------------------------------------------

# # integrate `fd` with `fzf`
# export FZF_DEFAULT_COMMAND='fd --type file --hidden --exclude .git --color=always'
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# # now, you can type `vim <Ctrl-T>` on your terminal to open fzf and search through the fd-results.
# export FZF_DEFAULT_OPTS="--ansi"

# zstyle 'z4h:fzf-tab:*' show-group brief                     # show header only if multiple items / group
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}       # set list-colors to enable filename colorizing

export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
--color=fg:-1,bg:-1,hl:#c678dd,fg+:#ffffff,bg+:#4b5263,hl+:#d858fe
--color=info:#98c379,prompt:#61afef,pointer:#be5046,marker:#e5c07b,spinner:#61afef,header:#61afef
'
zstyle ':z4h:fzf-complete' fzf-flags --color='dark'
zstyle ':z4h:fzf-complete' fzf-flags --color='fg:-1,bg:-1,hl:#c678dd,fg+:#ffffff,bg+:#4b5263,hl+:#d858fe'
zstyle ':z4h:fzf-complete' fzf-flags --color='info:#98c379,prompt:#61afef,pointer:#be5046,marker:#e5c07b,spinner:#61afef,header:#61afef'

# zstyle 'z4h:fzf-complete:*' fzf-preview 'bat --style=numbers --color=always --line-range :500 {}'
# zstyle 'z4h:fzf-complete:cd:*' fzf-preview 'exa -1 --color=always $realpath' # preview directory's content with exa when completing cd

### fzf-flags passes options through to fzf
# zstyle ':z4h:fzf-complete' fzf-flags --preview 'exa -1 --color=always $realpath' # preview directory's content with exa when completing cd
# zstyle ':z4h:fzf-complete:' fzf-flags --show-group brief                     # show header only if multiple items / group


# don't cover the prompt when fzf-history (ctrl+r)
# zstyle ':z4h:fzf-history' fzf-preview no

### Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nano'
else
  export EDITOR='code'
fi

### >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$("${HOME}/mambaforge/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "${HOME}/mambaforge/etc/profile.d/conda.sh" ]; then
        . "${HOME}/mambaforge/etc/profile.d/conda.sh"  # commented out by conda initialize
        # CONDA_CHANGEPS1=false conda activate base
    else
        export PATH="${HOME}/mambaforge/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/Users/${USERNAME}/mambaforge/etc/profile.d/mamba.sh" ]; then
    . "/Users/${USERNAME}/mambaforge/etc/profile.d/mamba.sh"  # commented out by conda initialize
fi
### <<< conda initialize <<<

