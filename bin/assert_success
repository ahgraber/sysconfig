#!/usr/bin/env bash
# shellcheck disable=SC2034 # don't warn for unused variables

set -o errexit
# set -o nounset
set -o pipefail
# set -o xtrace

# ------------------------------------------------------------------------
# https://github.com/kward/shunit2 - provide assertions for shell scripts
# Public domain - Apache License 2.0
# https://github.com/kward/shunit2/blob/master/LICENSE
# ------------------------------------------------------------------------

usage () {
  cat << EOF
Usage: $(basename "$0") [ options ] <command> [ message ]
  Assert a command succeeds
  In shell, a value of 0 represents success and a non-zero value is failure.

Options:
  -h                    show help and exit
  -v                    verbose output

Args:
  condition: string:    shell condition statement or command
  message:   string:    failure message [optional]

Example: '$(basename "$0") -v "[ -f '/non/existent/file' ]" "test failed"'
EOF
  exit
}

verbose=1
while getopts "hv" opt; do
  case ${opt} in
    h ) usage ;;
    v ) verbose=0 ;;
    \? )
      printf "Invalid option: %s" "$OPTARG" 1>&2
      usage
      ;;
  esac
done
shift $((OPTIND -1)) # for any additional params

[[ $# -lt 1 || $# -gt 2 ]] && usage

[[ -z "$1" ]] && { warn "Empty command arg"; exit 1; } || condition="$1"
msg="${2:-}"
status='fail'

eval "$condition" >/dev/null 2>&1 && status='pass'

if [[ "$status" == 'pass' ]]; then
  status_msg="PASS :: $(basename "$0") ('$condition')"
  [[ "$verbose" -eq 0 ]] && win "$status_msg"
  exit 0
else
  status_msg="FAIL :: $(basename "$0") ('$condition')"
  if [[ -n "$msg" ]]; then
    yell "$status_msg :: $msg"
  elif [[ "$verbose" -eq 0 ]]; then
    yell "$status_msg"
  fi
  exit 1
fi
