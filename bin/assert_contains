#!/usr/bin/env bash
# shellcheck disable=SC2034 # don't warn for unused variables

set -o errexit
# set -o nounset
set -o pipefail
# set -o xtrace

# ------------------------------------------------------------------------
# https://github.com/torokmark/assert.sh - provide assertions for shell scripts
# Public domain - MIT License
# https://github.com/torokmark/assert.sh/blob/main/LICENSE
# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
# https://github.com/kward/shunit2 - provide assertions for shell scripts
# Public domain - Apache License 2.0
# https://github.com/kward/shunit2/blob/master/LICENSE
# ------------------------------------------------------------------------

usage () {
  cat << EOF
Usage: $(basename "$0") [ options ] <text> <search_term> [ message ]
  Assert that text contains the search term

Options:
  -h                    show help and exit
  -v                    verbose output

Args:
  actual: string:     actual value
  expected: string:   expected value
  message: string:    failure message [optional]

Example: '$(basename "$0") -v "Hello World!" "Hello"'
EOF
  exit
}

verbose=1
while getopts "hv" opt; do
  case ${opt} in
    h ) usage ;;
    v ) verbose=0 ;;
    \? )
      printf "Invalid option: %s" "$OPTARG" 1>&2
      usage
      ;;
  esac
done
shift $((OPTIND -1)) # for any additional params

[[ $# -lt 2 || $# -gt 3 ]] && usage

[[ -z "$1" ]] && { warn "Empty text arg"; exit 1; } || text="$1"
[[ -z "$2" ]] && { warn "Empty search_term arg"; exit 1; } || search_term="$2"
msg="${3:-}"
status='fail'

if [[ -z "${text##*"$search_term"*}" ]]; then
# if echo "$text" | grep -F -- "$search_term" >/dev/null; then
  status='pass'
fi

if [[ "$status" == 'pass' ]]; then
  status_msg="PASS :: $(basename "$0") ('$text', '$search_term')"
  [[ "$verbose" -eq 0 ]] && win "$status_msg"
  exit 0
else
  status_msg="FAIL :: $(basename "$0") ('$text', '$search_term')"
  if [[ -n "$msg" ]]; then
    yell "$status_msg :: $msg"
  elif [[ "$verbose" -eq 0 ]]; then
    yell "$status_msg"
  fi
  exit 1
fi
