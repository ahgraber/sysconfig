#!/usr/bin/env zsh

###-----------------------------------------------------------------------####
# Personal Zsh configuration file.
# Keep all shell customization and configuration
# (including exported environment variables such as PATH)
# in this file or in files source by it.
#
# Documentation: https://github.com/romkatv/zsh4humans/blob/v5/README.md.
###-----------------------------------------------------------------------####

### Uncomment to enable startup profiling (also at end of .zshrc!)
# zmodload zsh/zprof

### Periodic auto-update on Zsh startup: 'ask' or 'no'.
### You can manually run `z4h update` to update everything.
zstyle ':z4h:'                                auto-update       'ask'
zstyle ':z4h:'                                auto-update-days  '28'

### Move prompt to the bottom when zsh starts and on Ctrl+L.
zstyle ':z4h:'                                prompt-at-bottom  'yes'
### Open new tabs/windows in the same directory as the current tab
zstyle ':z4h:'                                propagate-cwd     'yes'
zstyle ':z4h:'                                prompt-height      4
### Enable iTerm2 integration
zstyle ':z4h:'                                iterm2-integration      'no'
### Enable shell integrations
zstyle ':z4h:'                                term-shell-integration  'yes'

### Autocompletion settings
zstyle ':z4h:autosuggestions'                 forward-char      'partial-accept'
zstyle ':z4h:autosuggestions'                 end-of-line       'partial-accept'

#### Completion settings
zstyle ':completion:*'                        list-colors       ${(s.:.)LS_COLORS}
zstyle ':completion:*'                        sort              false
zstyle ':completion:*:ls:*'                   list-dirs-first   true
### Improve completions for ssh based on ~/.ssh/config hosts list
zstyle ':completion:*:ssh:argument-1:'        tag-order         hosts users
zstyle ':completion:*:scp:argument-rest:'     tag-order         hosts files users
zstyle ':completion:*:(ssh|scp|rdp):*:hosts'  hosts

### Enable direnv to automatically source .envrc files.
if [[ "$(command -v direnv)" ]]; then
  zstyle ':z4h:direnv'                        enable            'yes'
  zstyle ':z4h:direnv:success'                notify            'yes'
fi

### Recursively traverse directories when TAB-completing files.
zstyle ':z4h:fzf-complete'                    recurse-dirs      'no'
zstyle ':z4h:fzf-complete'                    fzf-bindings      tab:repeat
zstyle ':z4h:fzf-dir-history'                 fzf-bindings      tab:repeat

### Configure automatic teleportation of z4h over ssh
### "Whitelist/Blacklist" modes determined by default
zstyle ':z4h:ssh:*'                           enable            'no'   # default
# zstyle ':z4h:ssh:example-hostname1'         enable            'yes'  # specified host
### Send these files over to the remote host when connecting over ssh to the enabled hosts.
# zstyle ':z4h:ssh:*'                           send-extra-files  '~/.nanorc' '~/.env.zsh'

### Clone additional Git repositories from GitHub.
### `z4h install` must come before `z4h init`; Cloned files can be used after `z4h init`.
z4h install ohmyzsh/ohmyzsh || return
z4h install conda-incubator/conda-zsh-completion || return

# Install or update core components (fzf, zsh-autosuggestions, etc.) and
# initialize Zsh. After this point console I/O is unavailable until Zsh
# is fully initialized. Everything that requires user interaction or can
# perform network I/O must be done above. Everything else is best done below.
z4h init || return

# ---[ Set shell options ]----------------------------------------------------
### Ref: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt no_clobber               # Force using `>!` to truncate / overwrite an existing file
setopt no_mail_warning          # Don't print warning if mail
setopt glob_dots                # no special treatment for file names with a leading dot
setopt glob_star_short          # ** only match directories
setopt no_auto_menu             # require an extra TAB press to open the completion menu
setopt always_to_end            # when completing from the middle of a word, move the cursor to the end of the word
setopt mark_dirs                # append trailing slash '/' to directory names resulting from globbing
setopt auto_param_slash         # if completed parameter is dir, add trailing slash
setopt rc_quotes                # enables parsing of quoted strings in .zshrc files


# ---[ Update path ]----------------------------------------------------------
typeset -U path
path=(/{bin,sbin} $path)
path=(/usr/{bin,sbin} $path)
path=(/usr/local/{bin,sbin} $path)
# for d in /usr/local/bin/*/; do
#     path=($d $path)
# done
path=(~/bin $path)
# [[ -f ~/.krew ]] || path=(~/.krew/bin $path) # kubectl plugins
[[ -f ~/.rd ]] || path=(~/.rd/bin $path) # rancher desktop

export path

# # Add system pythons to path?
# pythons=($HOME/Library/Python/3.7/bin $HOME/Library/Python/3.8/bin $HOME/Library/Python/3.9/bin)
# export path=($pythons $path)

# ---[ Load/Source additional plugins/files ]---------------------------------
### load a plugin
# `z4h load`:   ohmyzsh/ohmyzsh/plugins/emoji
### source an individual file
# `z4h source`: ohmyzsh/ohmyzsh/lib/diagnostics.zsh

# Source additional local files if they exist.
# z4h source "${HOME}/.env.zsh"
z4h source "${HOME}/.aliases"
z4h source "${HOME}/.aliases.local"
# if [[ -d "${HOME}/.fonts" ]]; then
#   for sh in "${HOME}"/.fonts/*.sh; do
#     z4h source "$sh"
#   done
# fi

[[ "$(command -v thefuck)" ]] && eval $(thefuck --alias)
[[ "$(command -v vivid)" ]] && export LS_COLORS="$(vivid generate one-dark)"

z4h load -c esc/conda-zsh-completion
z4h load -c ohmyzsh/ohmyzsh/plugins/gitfast            # git completions
z4h load -c ohmyzsh/ohmyzsh/plugins/safe-paste         # prevent pasted code from running
# z4h source -c ohmyzsh/ohmyzsh/lib/clipboard.zsh

### load local functions
### 'fzf' will detect based on filename + underscore (try 'conda_' + TAB)
z4h source -c "$HOME/.zshconfig/functions/clipboard.zsh"
# z4h source -c "$HOME/.zshconfig/functions/conda.zsh"

# z4h source -c "$HOME/.zshconfig/lib/corrections.zsh"

### Autoload functions.
autoload -Uz zmv

### Define functions and completions.
function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
compdef _directories md
compdef _default open

# ---[ Export environmental variables ]---------------------------------------
export GPG_TTY=$TTY
export LANG=en_US.UTF-8
export PAGER=less
export ZSH_CONFIG="${HOME}/.zshconfig"
export HOMEBREW_NO_ANALYTICS=1

# # unixodbc
# export LDFLAGS="-L/opt/homebrew/Cellar/unixodbc/2.3.9_1/lib ${LDFLAGS}"
# export CPPFLAGS="-I/opt/homebrew/Cellar/unixodbc/2.3.9_1/include ${CPPFLAGS}"
# # openblas
# export LDFLAGS="-L/opt/homebrew/opt/openblas/lib ${LDFLAGS}"
# export CPPFLAGS="-I/opt/homebrew/opt/openblas/include ${CPPFLAGS}"
# export OPENBLAS="$(brew --prefix openblas)"

# ---[ Prompt Configuration ]-------------------------------------------------
### Autodetect architecture (and set `brew` path) every time zsh called
if [[ "$(sysctl -a | grep machdep.cpu.brand_string)" == *Apple* ]]; then
  archcheck=$(/usr/bin/arch)
  typeset -g archcheck
  case $archcheck in
    arm64)
      archcheck+=' (Native)'
      if [[ -f /opt/homebrew/bin/brew ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
        alias brew='/opt/homebrew/bin/brew'
      fi
    ;;
    i386|x86_64)
      archcheck+=' (Rosetta)'
      if [[ -f /usr/local/bin/brew ]]; then
        eval "$(/usr/local/bin/brew shellenv)"
        alias brew='/usr/local/bin/brew'
      fi
    ;;
    *)
      archcheck+=' (Unknown)'
    ;;
  esac

  # add arch to p10k
  function prompt_my_arch() {
    p10k segment -f 250 -i 'ðŸ’»' -t "${archcheck//\%/%%}"
  }

  # hack prompt to show "my_arch" at end of RIGHT_PROMPT_ELEMENTS
  # if specific location is required, modify ~/.p10k.zsh
  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=my_arch
fi

### Smooth rendering with two-line prompt with an empty line before it
POSTEDIT=$'\n\n\e[2A'

### make transient prompt work consistently when closing an SSH connection
z4h bindkey z4h-eof             Ctrl+D
setopt ignore_eof

### ---[ Define key bindings ]-------------------------------------------------
### For default keybindings, see
### Ref: https://github.com/romkatv/zsh4humans/blob/v5/fn/-z4h-init-zle

### Keyboard type: 'mac' or 'pc'.
zstyle ':z4h:bindkey' keyboard  'mac'

### unset keybindings
# () {
#   local key keys=(
#     "^B"   "^D"   "^F"   "^N"   "^O"   "^P"   "^Q"   "^S"   "^T"   "^W"
#     "^X*"  "^X="  "^X?"  "^XC"  "^XG"  "^Xa"  "^Xc"  "^Xd"  "^Xe"  "^Xg"  "^Xh"  "^Xm"  "^Xn"
#     "^Xr"  "^Xs"  "^Xt"  "^Xu"  "^X~"  "^[ "  "^[!"  "^['"  "^[,"  "^[<"  "^[>"  "^[?"
#     "^[A"  "^[B"  "^[C"  "^[D"  "^[F"  "^[G"  "^[L"  "^[M"  "^[N"  "^[P"  "^[Q"  "^[S"  "^[T"
#     "^[U"  "^[W"  "^[_"  "^[a"  "^[b"  "^[d"  "^[f"  "^[g"  "^[l"  "^[n"  "^[p"  "^[q"  "^[s"
#     "^[t"  "^[u"  "^[w"  "^[y"  "^[z"  "^[|"  "^[~"  "^[^I" "^[^J" "^[^_" "^[\"" "^[\$" "^X^B"
#     "^X^F" "^X^J" "^X^K" "^X^N" "^X^O" "^X^R" "^X^U" "^X^X" "^[^D" "^[^G")
#   for key in $keys; do
#     bindkey $key z4h-do-nothing
#   done
# }

z4h bindkey undo                Ctrl+/
z4h bindkey redo                Alt+/
### mimic mac-standard key nav
z4h bindkey beginning-of-line   Ctrl+Left
z4h bindkey end-of-line         Ctrl+Right
z4h bindkey z4h-backward-word   Alt+Left
z4h bindkey z4h-forward-word    Alt+Right

### use system clipboard as kill buffer
# paste command
bindkey     '^y'                pb-yank                     # Ctrl + Y
bindkey     '^Y'                pb-yank                     # Ctrl + Y
# cut commands
bindkey     '^u'                pb-kill-whole-line          # Ctrl + U
bindkey     '^U'                pb-kill-whole-line          # Ctrl + U
bindkey     '^k'                pb-kill-line                # Ctrl + K
bindkey     '^K'                pb-kill-line                # Ctrl + K
bindkey     '^[[3;5~'           pb-kill-line                # Ctrl + Delete
bindkey     '^w'                pb-backward-kill-word       # Ctrl + W
bindkey     '^W'                pb-backward-kill-word       # Ctrl + W
bindkey     '^[d'               pb-kill-word                # Alt + D
bindkey     '^[D'               pb-kill-word                # Alt + D
# empty kill buffer
bindkey     '^X^K'              pb-kill-buffer              # Ctrl + X, Ctrl + K
# mark with ctrl+space, use Esc+W to mark region end
bindkey     '^[w'  pb-copy-region-as-kill-deactivate-mark   # Alt + W
bindkey     '^[W'  pb-copy-region-as-kill-deactivate-mark   # Alt + W

### shift + arrows does directory navigation
z4h bindkey z4h-cd-back         Shift+Left   # cd into the previous directory
z4h bindkey z4h-cd-forward      Shift+Right  # cd into the next directory
z4h bindkey z4h-cd-up           Shift+Up     # cd into the parent directory
z4h bindkey z4h-cd-down         Shift+Down   # cd into a child directory


# ---[ User Configuration ]---------------------------------------------------

# Dynamically set /etc/odbcinst.ini if it exists based on terminal environment
# requires `sudo chown $(whoami) /etc/odbcinst.ini`
if [[ -f /etc/odbcinst.ini ]]; then
  cat $HOMEBREW_PREFIX/etc/odbcinst.ini >! /etc/odbcinst.ini
fi

### >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$("${HOME}/mambaforge/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "${HOME}/mambaforge/etc/profile.d/conda.sh" ]; then
        . "${HOME}/mambaforge/etc/profile.d/conda.sh"  # commented out by conda initialize
        # CONDA_CHANGEPS1=false conda activate base
    else
        export PATH="${HOME}/mambaforge/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/Users/${USERNAME}/mambaforge/etc/profile.d/mamba.sh" ]; then
    . "/Users/${USERNAME}/mambaforge/etc/profile.d/mamba.sh"  # commented out by conda initialize
fi
### <<< conda initialize <<<


### uncomment to enable startup profiling
# zprof
